//
// Generated file, do not edit! Created by opp_msgc 4.3 from linklayer/can/dataframe.msg.
//

#ifndef _DATAFRAME_M_H_
#define _DATAFRAME_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>linklayer/can/dataframe.msg</tt> by opp_msgc.
 * <pre>
 * message DataFrame{
 * 	string node;		
 * 	int canID;			
 *     int length;			
 * 	bool remote;		
 * 	char data[8];		
 * 	simtime_t startTime;
 * 	int period;			
 * }
 * </pre>
 */
class DataFrame : public ::cMessage
{
  protected:
    opp_string node_var;
    int canID_var;
    int length_var;
    bool remote_var;
    char data_var[8];
    simtime_t startTime_var;
    int period_var;

  private:
    void copy(const DataFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataFrame&);

  public:
    DataFrame(const char *name=NULL, int kind=0);
    DataFrame(const DataFrame& other);
    virtual ~DataFrame();
    DataFrame& operator=(const DataFrame& other);
    virtual DataFrame *dup() const {return new DataFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNode() const;
    virtual void setNode(const char * node);
    virtual int getCanID() const;
    virtual void setCanID(int canID);
    virtual int getLength() const;
    virtual void setLength(int length);
    virtual bool getRemote() const;
    virtual void setRemote(bool remote);
    virtual unsigned int getDataArraySize() const;
    virtual char getData(unsigned int k) const;
    virtual void setData(unsigned int k, char data);
    virtual simtime_t getStartTime() const;
    virtual void setStartTime(simtime_t startTime);
    virtual int getPeriod() const;
    virtual void setPeriod(int period);
};

inline void doPacking(cCommBuffer *b, DataFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataFrame& obj) {obj.parsimUnpack(b);}


#endif // _DATAFRAME_M_H_
